# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.



Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.

 #	no_of_nodes=3
	no_of_nodes=ENV['NODENUM'].to_i
	no_of_zookeeper=ENV['ZOOKEEPERNUM'].to_i
        config.vm.box = "digital_ocean"
	ip_file = File.open("ip_file.txt", 'w')


	(1..no_of_nodes).each do |i|
	
		config.vm.define "hungryhippos-test-#{i}" do |node|
			node_name="hungryhippos-test-#{i}"
			node.vm.box = "digital_ocean"
			curr_dir=File.dirname(__FILE__)
			#puts curr_dir

			node.vm.provision :chef_solo do |chef|
				# Paths to your cookbooks (on the host)
				chef.cookbooks_path = ["#{curr_dir}/chef/src/cookbooks"]
				chef.add_recipe  'HH_java'
				chef.add_recipe  'create_group_user'
				chef.add_recipe 'hadoop_ssh_keygen_trans_mastertoslaves'			
				chef.add_recipe 'hadoop_ssh_keygen_master'
				chef.add_recipe 'hadoop_ssh_keycopy_slave'

				 if i <=no_of_zookeeper
					chef.add_recipe 'download_zookeeper'
					chef.add_recipe 'cluster_mode_zookeeper'
				end

   			end


		       node.trigger.after :up do
				puts "running trigger after node up"
				ipAddr = `vagrant ssh #{node_name} -c 'ifconfig | grep -oP "inet addr:\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}" | grep -oP "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}" | tail -n 2 | head -n 1'`
				sleep 5
				ipAddr=ipAddr.strip
				if i <=no_of_zookeeper
					ip_file.puts "#{ipAddr}\thungryhippos-#{i} (Zookeeper)"
				else
					 ip_file.puts "#{ipAddr}\thungryhippos-#{i}"
				end
			end

		end
	end

	config.ssh.private_key_path = "~/.ssh/id_rsa"
	config.vm.provider :digital_ocean do |provider|
		#  provider.client_id = "YOUR CLIENT ID"
		#  provider.api_key = "639d421b041fed3566bc3da896d31347befdad49f8c9add911eee5a554865294"
		provider.token = "639d421b041fed3566bc3da896d31347befdad49f8c9add911eee5a554865294"
		provider.image = "ubuntu-14-04-x64"
		provider.region = "nyc2"
		provider.size = "2GB"
	end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end

