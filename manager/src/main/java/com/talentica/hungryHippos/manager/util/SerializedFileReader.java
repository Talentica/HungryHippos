package com.talentica.hungryHippos.manager.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.commons.lang.SerializationUtils;

/**
 * This is a utility to read key node number map and few other files which are
 * generated by application and saved in seralized form on servers.
 * 
 * @author nitink
 *
 */
public class SerializedFileReader {

	public static void main(String[] args) throws IOException {
		if (args.length != 2) {
			System.out.println(
					"Usage pattern: java -jar <jar name> <input file path> <readable output file path> e.g. java -jar Utility.jar ./serialized_data_0 ./readable_data_0");
			System.exit(0);
		}
		File dataFile = new File(args[0]);
		FileInputStream fileInputStream = new FileInputStream(dataFile);
		Object deserializedObject = SerializationUtils.deserialize(fileInputStream);
		fileInputStream.close();

		File readableDataFile = new File(args[1]);
		FileWriter fileWriter = new FileWriter(readableDataFile);
		if (deserializedObject != null) {
			if (deserializedObject instanceof Map) {
				fileWriter.write(getFormattedString((Map) deserializedObject, 1));
			} else {
				fileWriter.write(deserializedObject.toString());
			}
		}
		fileWriter.flush();
		fileWriter.close();
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public static String getFormattedString(Map map, int startingFromDepth) {
		StringBuilder sb = new StringBuilder();
		Iterator<Entry> iter = map.entrySet().iterator();
		while (iter.hasNext()) {
			Entry entry = iter.next();
			sb.append("\n");
			for (int i = 0; i < startingFromDepth; i++) {
				sb.append("\t");
			}
			sb.append(entry.getKey());
			if (entry.getValue() instanceof Map) {
				startingFromDepth++;
				String mapValueFormattedAsString = getFormattedString((Map) entry.getValue(), startingFromDepth);
				startingFromDepth--;
				sb.append(mapValueFormattedAsString);
			} else {
				sb.append("\t" + entry.getValue());
			}
		}
		return sb.toString();

	}

}
