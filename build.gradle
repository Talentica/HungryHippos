apply plugin: 'java'

sourceCompatibility = 1.8

allprojects {
	apply plugin: 'java'
	group = 'com.talentica.hungry-hippos'
	version = '0.7.0'


	repositories {
		mavenCentral()
		jcenter()
	}

	dependencies{
		compile group: 'commons-io', name: 'commons-io', version: '2.5'
		compile group:'org.eclipse.persistence',name:'org.eclipse.persistence.moxy',version:'2.5.2'
        testCompile 'junit:junit:4.11'
        testCompile 'org.mockito:mockito-all:1.10.+'
        testCompile 'org.powermock:powermock-module-junit4:1.6.5'
        testCompile 'org.powermock:powermock-api-mockito:1.6.5'
	}
	
	sourceSets {
		test {
		  java.srcDir 'src/test/java'
		}
		integration {
		  java.srcDir 'src/test/integration/java'
		  resources.srcDir 'src/test/resources'
		  compileClasspath += main.output + test.output
		  runtimeClasspath += main.output + test.output
		}
	  }
	
	jar{
		exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
	}
	  
	  configurations {
		integrationCompile.extendsFrom testCompile
		integrationRuntime.extendsFrom testRuntime
	  }
	  
	  task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
		testClassesDir = sourceSets.integration.output.classesDir
		classpath = sourceSets.integration.runtimeClasspath
	  }

}

repositories {
    mavenCentral()
	jcenter()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
     compile group: 'log4j', name: 'log4j', version: '1.2.16'
}

buildscript {
  repositories {
    maven {
      url 'https://plugins.gradle.org/m2/'
    }
	jcenter()
  }
  dependencies {
    classpath 'net.researchgate:gradle-release:2.3.4'
	classpath 'no.nils:wsdl2java:0.6'
  }
}

apply plugin: 'net.researchgate.release'

release {
	failOnUpdateNeeded = false
	failOnUnversionedFiles = false
  }

task wrapper(type: Wrapper) {
	gradleVersion = '2.12'
}

def cleanupAndMakeDirs(path){
	File file= new File(path)
	file.mkdirs();
	file.list().each { new File(file.getPath(),it).delete() }
}


subprojects{
	
	if (JavaVersion.current().isJava8Compatible()) {
		allprojects {
		  tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
			  }
		}
	}
	
	ext.outputLibsDir="build/libs"
	ext.outputScriptsDir="src/main/resources/bin"
	ext.javaodcDir="build/docs/javadoc"
	ext.configDir="src/main/resources/distribution"
	ext.distributionHome="../build/distribution/HungryHippos-"+project.version+"/"

	ext.apiDir=distributionHome +"docs"
	ext.destDir= apiDir+"/"+project.name
	ext.librariesDir= distributionHome+"lib"
	ext.mapredLibrariesDir=distributionHome +"mapreduce/lib"
	ext.mapredApi=distributionHome +"mapreduce/docs"
	ext.binDir=distributionHome +"bin"
	ext.destConfigDir=distributionHome +"config"
	
	task makeRequiredDirs() {
		cleanupAndMakeDirs(librariesDir)
		cleanupAndMakeDirs(mapredLibrariesDir)
		cleanupAndMakeDirs(mapredApi)
		cleanupAndMakeDirs(binDir)
		cleanupAndMakeDirs(destConfigDir)
		cleanupAndMakeDirs(apiDir)
		
	}
	
	task copyOtherThanMapReduceLibs(dependsOn:[makeRequiredDirs],type:Copy){
		from outputLibsDir into librariesDir
		exclude { details -> details.file.name.equals('client-api.jar') || details.file.name.contains('orig')}
	}

	task copyMapReduceLib(dependsOn:[makeRequiredDirs],type:Copy){
		from outputLibsDir into mapredLibrariesDir
		include 'client-api.jar'
	}
	
	task copyShellScripts(dependsOn:[makeRequiredDirs],type:Copy){
		from outputScriptsDir into binDir
		include "*.sh"
	}

	task copyMapredApi(dependsOn:[makeRequiredDirs,javadoc],type:Copy){
		if(project.name.equals("client-api")){
			from javaodcDir into mapredApi
		}
	}
	
	task copyApi(dependsOn:[makeRequiredDirs,javadoc],type:Copy){
		if(!project.name.equals("client-api")){
			cleanupAndMakeDirs(destDir)
			from javaodcDir into destDir
		}
	}
	
	task copyConfigurations(dependsOn:[makeRequiredDirs],type:Copy){
			from configDir into destConfigDir
	}
	
	task buildDistribution(dependsOn:[build,jar,copyConfigurations,copyOtherThanMapReduceLibs,copyMapReduceLib,copyShellScripts,copyMapredApi,copyApi],type:Copy){
		
	}
	
}